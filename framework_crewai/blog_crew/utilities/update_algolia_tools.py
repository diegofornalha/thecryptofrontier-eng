#!/usr/bin/env python3
"""
Script para atualizar as configura√ß√µes das ferramentas de integra√ß√£o com Algolia.
Usado para definir valores padr√£o de configura√ß√£o em todos os scripts relacionados.
"""

import os
import sys
import re
import glob

# Defini√ß√µes das configura√ß√µes do Algolia
ALGOLIA_CONFIG = {
    'ALGOLIA_APP_ID': '42TZWHW8UP',
    'ALGOLIA_ADMIN_API_KEY': 'd0cb55ec8f07832bc5f57da0bd25c535',  # Admin API Key
    'ALGOLIA_INDEX_NAME': 'development_mcpx_content',
    'ALGOLIA_SEARCH_API_KEY': 'b32edbeb383fc3d1279658e7c3661843',
}

# Padr√µes para localizar as configura√ß√µes nos arquivos
CONFIG_PATTERN = r'(?:# Configura√ß√µes do Algolia\s+)?ALGOLIA_APP_ID\s*=\s*os\.environ\.get\([\'"]ALGOLIA_APP_ID[\'"](?:,\s*[\'"].*?[\'"]\s*)?\)[\r\n]+ALGOLIA_ADMIN_API_KEY\s*=\s*os\.environ\.get\([\'"]ALGOLIA_ADMIN_API_KEY[\'"](?:,\s*[\'"].*?[\'"]\s*)?\)[\r\n]+ALGOLIA_INDEX_NAME\s*=\s*os\.environ\.get\([\'"]ALGOLIA_INDEX_NAME[\'"](?:,\s*[\'"].*?[\'"]\s*)?\)'

# Diret√≥rios para procurar arquivos Python
DIRS_TO_SEARCH = [
    os.path.join(os.getcwd()),
    os.path.join(os.getcwd(), 'tools')
]

def update_algolia_config_in_file(file_path):
    """
    Atualiza as configura√ß√µes do Algolia em um arquivo espec√≠fico.
    
    Args:
        file_path: Caminho do arquivo para atualizar
    
    Returns:
        bool: True se o arquivo foi atualizado, False caso contr√°rio
    """
    try:
        # Ler o arquivo
        with open(file_path, 'r', encoding='utf-8') as file:
            content = file.read()
        
        # Procurar pelo padr√£o de configura√ß√£o
        match = re.search(CONFIG_PATTERN, content)
        if not match:
            print(f"‚ùå Padr√£o de configura√ß√£o n√£o encontrado em {file_path}")
            return False
        
        # Texto de substitui√ß√£o
        replacement = f"""# Configura√ß√µes do Algolia
ALGOLIA_APP_ID = os.environ.get("ALGOLIA_APP_ID", "{ALGOLIA_CONFIG['ALGOLIA_APP_ID']}")
ALGOLIA_ADMIN_API_KEY = os.environ.get("ALGOLIA_ADMIN_API_KEY", "{ALGOLIA_CONFIG['ALGOLIA_ADMIN_API_KEY']}")  # Admin API Key
ALGOLIA_INDEX_NAME = os.environ.get("ALGOLIA_INDEX_NAME", "{ALGOLIA_CONFIG['ALGOLIA_INDEX_NAME']}")"""
        
        # Substituir a configura√ß√£o
        updated_content = content.replace(match.group(0), replacement)
        
        # Escrever o arquivo atualizado
        with open(file_path, 'w', encoding='utf-8') as file:
            file.write(updated_content)
        
        print(f"‚úÖ Configura√ß√µes atualizadas em {file_path}")
        return True
    
    except Exception as e:
        print(f"‚ùå Erro ao atualizar {file_path}: {str(e)}")
        return False

def update_algolia_tool(file_path):
    """
    Atualiza as configura√ß√µes na ferramenta CrewAI para Algolia.
    
    Args:
        file_path: Caminho do arquivo de ferramentas Algolia
    
    Returns:
        bool: True se o arquivo foi atualizado, False caso contr√°rio
    """
    try:
        # Ler o arquivo
        with open(file_path, 'r', encoding='utf-8') as file:
            content = file.read()
        
        # Padr√£o para configura√ß√µes de credenciais dentro de fun√ß√µes
        cred_pattern = r'app_id\s*=\s*os\.environ\.get\([\'"]ALGOLIA_APP_ID[\'"]\)[\r\n]\s+api_key\s*=\s*os\.environ\.get\([\'"]ALGOLIA_ADMIN_API_KEY[\'"]\)[\r\n]\s+index_name\s*=\s*os\.environ\.get\([\'"]ALGOLIA_INDEX_NAME[\'"]\)'
        
        # Verificar se encontrou o padr√£o
        matches = re.findall(cred_pattern, content)
        if not matches:
            print(f"‚ùå Padr√£o de credenciais n√£o encontrado em {file_path}")
            return False
        
        # Texto de substitui√ß√£o para credenciais dentro de fun√ß√µes
        replacement = f"""app_id = os.environ.get('ALGOLIA_APP_ID', '{ALGOLIA_CONFIG['ALGOLIA_APP_ID']}')
        api_key = os.environ.get('ALGOLIA_ADMIN_API_KEY', '{ALGOLIA_CONFIG['ALGOLIA_ADMIN_API_KEY']}')
        index_name = os.environ.get('ALGOLIA_INDEX_NAME', '{ALGOLIA_CONFIG['ALGOLIA_INDEX_NAME']}')"""
        
        # Substituir todas as ocorr√™ncias
        updated_content = content
        for match in matches:
            updated_content = updated_content.replace(match, replacement)
        
        # Escrever o arquivo atualizado
        with open(file_path, 'w', encoding='utf-8') as file:
            file.write(updated_content)
        
        print(f"‚úÖ Credenciais dentro de fun√ß√µes atualizadas em {file_path}")
        return True
    
    except Exception as e:
        print(f"‚ùå Erro ao atualizar credenciais em {file_path}: {str(e)}")
        return False

def main():
    """Fun√ß√£o principal para atualizar configura√ß√µes."""
    updated_files = []
    
    # Procurar e atualizar arquivos
    for dir_path in DIRS_TO_SEARCH:
        python_files = glob.glob(os.path.join(dir_path, "*.py"))
        for file_path in python_files:
            filename = os.path.basename(file_path)
            if "algolia" in filename.lower():
                print(f"üîç Processando arquivo: {file_path}")
                
                # Atualizar as configura√ß√µes principais
                if update_algolia_config_in_file(file_path):
                    updated_files.append(file_path)
                
                # Para ferramentas CrewAI, atualizar tamb√©m as credenciais dentro das fun√ß√µes
                if "tools" in file_path:
                    update_algolia_tool(file_path)
    
    # Mostrar resumo
    if updated_files:
        print(f"\n‚úÖ Foram atualizados {len(updated_files)} arquivos:")
        for file in updated_files:
            print(f"  - {file}")
    else:
        print("\n‚ùå Nenhum arquivo foi atualizado.")
    
    print("\n‚öôÔ∏è Configura√ß√µes do Algolia definidas:")
    for key, value in ALGOLIA_CONFIG.items():
        print(f"  {key}: {value}")

if __name__ == "__main__":
    main()