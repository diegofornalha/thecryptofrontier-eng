#!/usr/bin/env python3
"""
Streamlit App para executar diferentes pipelines de blog
"""

import streamlit as st
import subprocess
import os
import sys
import json
from pathlib import Path
from datetime import datetime
import time

# Adicionar diret√≥rio ao path
sys.path.append(str(Path(__file__).parent))

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Blog Crypto Pipeline Manager",
    page_icon="üöÄ",
    layout="wide"
)

# T√≠tulo principal
st.title("üöÄ Blog Crypto Pipeline Manager")
st.markdown("---")

# Sidebar com informa√ß√µes
with st.sidebar:
    st.header("‚ÑπÔ∏è Informa√ß√µes")
    st.info("""
    **Pr√≥xima execu√ß√£o do cron:**
    17:00 UTC (20:00 S√£o Paulo)
    
    **Pipeline atual no cron:**
    simple_pipeline.py
    """)
    
    # Verificar vari√°veis de ambiente
    st.header("üîß Status do Ambiente")
    env_vars = {
        "GOOGLE_API_KEY": "Google Gemini (Tradu√ß√£o)",
        "OPENAI_API_KEY": "OpenAI (Imagens)",
        "SANITY_PROJECT_ID": "Sanity (CMS)",
        "SANITY_API_TOKEN": "Sanity (Auth)"
    }
    
    all_configured = True
    for var, desc in env_vars.items():
        if os.environ.get(var):
            st.success(f"‚úÖ {desc}")
        else:
            st.error(f"‚ùå {desc}")
            all_configured = False

# Op√ß√µes de pipeline
st.header("üìã Escolha o Pipeline")

# Criar 3 colunas para os 3 pipelines
col1, col2, col3 = st.columns(3)

with col1:
    st.subheader("1Ô∏è‚É£ Pipeline CrewAI Original")
    st.markdown("""
    **Arquivo:** `run_pipeline.py`
    - ‚úÖ Usa agentes inteligentes
    - ‚úÖ Estrutura modular
    - ‚ö†Ô∏è Corre√ß√£o aplicada para salvar arquivos
    """)
    if st.button("üöÄ Executar CrewAI Original", key="crewai"):
        pipeline_choice = "crewai"
    
    st.subheader("2Ô∏è‚É£ Pipeline Enhanced")
    st.markdown("""
    **Arquivo:** `run_pipeline_enhanced.py`
    - ‚úÖ Cache de imagens
    - ‚úÖ Processamento paralelo
    - ‚úÖ Retry autom√°tico
    - ‚ùå Precisa depend√™ncias extras
    """)
    if st.button("‚ö° Executar Enhanced", key="enhanced"):
        pipeline_choice = "enhanced"

with col3:
    st.subheader("3Ô∏è‚É£ Pipeline Simplificado")
    st.markdown("""
    **Arquivo:** `simple_pipeline.py`
    - ‚úÖ C√≥digo direto e simples
    - ‚úÖ Menos depend√™ncias
    - ‚úÖ Mais confi√°vel
    - ‚≠ê **Recomendado**
    """)
    if st.button("üéØ Executar Simplificado", key="simple", type="primary"):
        pipeline_choice = "simple"

# Configura√ß√µes de execu√ß√£o
st.markdown("---")
st.header("‚öôÔ∏è Configura√ß√µes")

col_config1, col_config2, col_config3 = st.columns(3)

with col_config1:
    article_limit = st.number_input(
        "N√∫mero de artigos",
        min_value=1,
        max_value=10,
        value=3,
        help="Quantos artigos processar"
    )

with col_config2:
    verbose = st.checkbox(
        "Modo detalhado",
        value=True,
        help="Mostrar logs detalhados"
    )

with col_config3:
    dry_run = st.checkbox(
        "Modo teste",
        value=False,
        help="Simular execu√ß√£o sem publicar"
    )

# √Årea de execu√ß√£o
st.markdown("---")

# Container para logs
log_container = st.container()

# Fun√ß√£o para executar pipeline
def run_pipeline(pipeline_type, limit, verbose, dry_run):
    """Executa o pipeline selecionado"""
    
    # Preparar comando baseado no tipo
    commands = {
        "crewai": ["python", "run_pipeline.py", "--limit", str(limit)],
        "enhanced": ["python", "run_pipeline_enhanced.py", "--limit", str(limit)],
        "simple": ["python", "simple_pipeline.py"]
    }
    
    if pipeline_type not in commands:
        st.error("Pipeline n√£o reconhecido!")
        return
    
    cmd = commands[pipeline_type]
    
    # Adicionar flags
    if verbose and pipeline_type in ["crewai", "enhanced"]:
        cmd.append("--verbose")
    
    # Configurar ambiente
    env = os.environ.copy()
    env["ARTICLE_LIMIT"] = str(limit)
    
    if dry_run:
        env["DRY_RUN"] = "1"
        st.warning("üîß Modo teste ativado - nada ser√° publicado")
    
    # Ativar ambiente virtual
    venv_path = Path(__file__).parent / "venv"
    if venv_path.exists():
        if sys.platform == "win32":
            env["PATH"] = str(venv_path / "Scripts") + ";" + env.get("PATH", "")
        else:
            env["PATH"] = str(venv_path / "bin") + ":" + env.get("PATH", "")
    
    # Executar
    with st.spinner(f"üîÑ Executando {pipeline_type} pipeline..."):
        try:
            # Criar arquivo de log tempor√°rio
            log_file = f"pipeline_run_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
            
            # Progress bar
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            # Executar processo
            process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                env=env,
                cwd=Path(__file__).parent
            )
            
            # Container para logs em tempo real
            log_lines = []
            log_display = st.empty()
            
            # Ler sa√≠da em tempo real
            while True:
                line = process.stdout.readline()
                if line:
                    log_lines.append(line.strip())
                    
                    # Atualizar display (√∫ltimas 20 linhas)
                    log_display.code('\n'.join(log_lines[-20:]), language="text")
                    
                    # Atualizar progresso baseado em palavras-chave
                    if "RSS" in line or "feed" in line.lower():
                        progress_bar.progress(0.2)
                        status_text.text("üì° Lendo feeds RSS...")
                    elif "traduz" in line.lower() or "translat" in line.lower():
                        progress_bar.progress(0.4)
                        status_text.text("üåê Traduzindo artigos...")
                    elif "imagem" in line.lower() or "image" in line.lower():
                        progress_bar.progress(0.6)
                        status_text.text("üé® Gerando imagens...")
                    elif "public" in line.lower() or "sanity" in line.lower():
                        progress_bar.progress(0.8)
                        status_text.text("üì§ Publicando no Sanity...")
                    elif "conclu" in line.lower() or "complete" in line.lower():
                        progress_bar.progress(1.0)
                        status_text.text("‚úÖ Pipeline conclu√≠do!")
                
                # Verificar se processo terminou
                if process.poll() is not None:
                    break
            
            # Pegar c√≥digo de sa√≠da
            return_code = process.wait()
            
            # Salvar log completo
            with open(log_file, 'w') as f:
                f.write('\n'.join(log_lines))
            
            if return_code == 0:
                st.success(f"‚úÖ Pipeline executado com sucesso! Log salvo em: {log_file}")
                
                # Mostrar estat√≠sticas
                st.subheader("üìä Estat√≠sticas")
                col_stat1, col_stat2, col_stat3 = st.columns(3)
                
                # Contar arquivos processados
                posts_dirs = {
                    "posts_para_traduzir": "üì• Coletados",
                    "posts_traduzidos": "üåê Traduzidos",
                    "posts_formatados": "üìù Formatados",
                    "posts_publicados": "‚úÖ Publicados"
                }
                
                for dir_name, label in posts_dirs.items():
                    dir_path = Path(dir_name)
                    if dir_path.exists():
                        count = len(list(dir_path.glob("*.json")))
                        if "Coletados" in label:
                            col_stat1.metric(label, count)
                        elif "Traduzidos" in label:
                            col_stat2.metric(label, count)
                        elif "Publicados" in label:
                            col_stat3.metric(label, count)
                
            else:
                st.error(f"‚ùå Pipeline falhou com c√≥digo: {return_code}")
                
        except Exception as e:
            st.error(f"‚ùå Erro ao executar pipeline: {str(e)}")

# Executar se algum bot√£o foi clicado
if 'pipeline_choice' in locals():
    if not all_configured:
        st.error("‚ö†Ô∏è Configure todas as vari√°veis de ambiente antes de executar!")
    else:
        run_pipeline(pipeline_choice, article_limit, verbose, dry_run)

# √Årea de logs hist√≥ricos
st.markdown("---")
st.header("üìú Logs Hist√≥ricos")

# Listar logs dispon√≠veis
log_files = sorted(Path.cwd().glob("pipeline*.log"), reverse=True)[:10]

if log_files:
    selected_log = st.selectbox(
        "Selecione um arquivo de log",
        options=log_files,
        format_func=lambda x: f"{x.name} - {datetime.fromtimestamp(x.stat().st_mtime).strftime('%d/%m/%Y %H:%M')}"
    )
    
    if st.button("üìñ Ver log selecionado"):
        with open(selected_log, 'r') as f:
            log_content = f.read()
            st.code(log_content[-5000:], language="text")  # √öltimas 5000 caracteres
else:
    st.info("Nenhum arquivo de log encontrado")

# Footer
st.markdown("---")
st.caption("ü§ñ Blog Crypto Pipeline Manager v1.0 | Desenvolvido com Streamlit")